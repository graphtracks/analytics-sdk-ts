/* tslint:disable */
/* eslint-disable */
/**
 * GraphTracks Analytics API
 * Bluesky Analytics API for GraphTracks
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// @ts-ignore
import {
	BASE_PATH,
	BaseAPI,
	COLLECTION_FORMATS,
	type RequestArgs,
	RequiredError,
	operationServerMap,
} from "../base";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	createRequestFunction,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from "../common";
import type { Configuration } from "../configuration";
// @ts-ignore
import type { DataPoint } from "../model";
// @ts-ignore
import type { GetGlobalStatsForAccountAPI403Response } from "../model";
// @ts-ignore
import type { Metric } from "../model";
// @ts-ignore
import type { Network } from "../model";
// @ts-ignore
import type { Timeframe } from "../model";
/**
 * BlueSkyAnalyticsApi - axios parameter creator
 * @export
 */
export const BlueSkyAnalyticsApiAxiosParamCreator = function (
	configuration?: Configuration,
) {
	return {
		/**
		 * Get growth rate statistics for account. Timeframe, from or to must be provided.
		 * @summary Growth rate statistics for account
		 * @param {Network} network The network to get stats for. Only BlueSky is supported right now.
		 * @param {string} accountId The account id to get stats for. This is the did of the account for BlueSky.
		 * @param {Metric} metric The metric to get stats for
		 * @param {Timeframe} [timeframe] The timeframe to get stats for. If to and from are not provided, will return now - Timeframe.
		 * @param {string} [from] The start date of the timeframe. If not provided, timeframe and to must be provided.
		 * @param {string} [to] The end date of the timeframe. If not provided, timeframe and from must be provided.
		 * @param {string} [bucket] bucket size. Interval in seconds between data points. Data points will be aggregated into this bucket size. Must be provided as string
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getGlobalStatsForAccountAPI: async (
			network: Network,
			accountId: string,
			metric: Metric,
			timeframe?: Timeframe,
			from?: string,
			to?: string,
			bucket?: string,
			options: RawAxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'network' is not null or undefined
			assertParamExists("getGlobalStatsForAccountAPI", "network", network);
			// verify required parameter 'accountId' is not null or undefined
			assertParamExists("getGlobalStatsForAccountAPI", "accountId", accountId);
			// verify required parameter 'metric' is not null or undefined
			assertParamExists("getGlobalStatsForAccountAPI", "metric", metric);
			const localVarPath =
				`/v1/api/networks/{network}/accounts/{account_id}/stats/{metric}`
					.replace(`{${"network"}}`, encodeURIComponent(String(network)))
					.replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
					.replace(`{${"metric"}}`, encodeURIComponent(String(metric)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = {
				method: "GET",
				...baseOptions,
				...options,
			};
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication apiKeyAuth required
			await setApiKeyToObject(
				localVarHeaderParameter,
				"X-API-Key",
				configuration,
			);

			if (timeframe !== undefined) {
				localVarQueryParameter["timeframe"] = timeframe;
			}

			if (from !== undefined) {
				localVarQueryParameter["from"] =
					(from as any) instanceof Date ? (from as any).toISOString() : from;
			}

			if (to !== undefined) {
				localVarQueryParameter["to"] =
					(to as any) instanceof Date ? (to as any).toISOString() : to;
			}

			if (bucket !== undefined) {
				localVarQueryParameter["bucket"] = bucket;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * BlueSkyAnalyticsApi - functional programming interface
 * @export
 */
export const BlueSkyAnalyticsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		BlueSkyAnalyticsApiAxiosParamCreator(configuration);
	return {
		/**
		 * Get growth rate statistics for account. Timeframe, from or to must be provided.
		 * @summary Growth rate statistics for account
		 * @param {Network} network The network to get stats for. Only BlueSky is supported right now.
		 * @param {string} accountId The account id to get stats for. This is the did of the account for BlueSky.
		 * @param {Metric} metric The metric to get stats for
		 * @param {Timeframe} [timeframe] The timeframe to get stats for. If to and from are not provided, will return now - Timeframe.
		 * @param {string} [from] The start date of the timeframe. If not provided, timeframe and to must be provided.
		 * @param {string} [to] The end date of the timeframe. If not provided, timeframe and from must be provided.
		 * @param {string} [bucket] bucket size. Interval in seconds between data points. Data points will be aggregated into this bucket size. Must be provided as string
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getGlobalStatsForAccountAPI(
			network: Network,
			accountId: string,
			metric: Metric,
			timeframe?: Timeframe,
			from?: string,
			to?: string,
			bucket?: string,
			options?: RawAxiosRequestConfig,
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string,
			) => AxiosPromise<Array<DataPoint>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getGlobalStatsForAccountAPI(
					network,
					accountId,
					metric,
					timeframe,
					from,
					to,
					bucket,
					options,
				);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap["BlueSkyAnalyticsApi.getGlobalStatsForAccountAPI"]?.[
					localVarOperationServerIndex
				]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration,
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * BlueSkyAnalyticsApi - factory interface
 * @export
 */
export const BlueSkyAnalyticsApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance,
) {
	const localVarFp = BlueSkyAnalyticsApiFp(configuration);
	return {
		/**
		 * Get growth rate statistics for account. Timeframe, from or to must be provided.
		 * @summary Growth rate statistics for account
		 * @param {BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest} requestParameters Request parameters.
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getGlobalStatsForAccountAPI(
			requestParameters: BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest,
			options?: RawAxiosRequestConfig,
		): AxiosPromise<Array<DataPoint>> {
			return localVarFp
				.getGlobalStatsForAccountAPI(
					requestParameters.network,
					requestParameters.accountId,
					requestParameters.metric,
					requestParameters.timeframe,
					requestParameters.from,
					requestParameters.to,
					requestParameters.bucket,
					options,
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * BlueSkyAnalyticsApi - interface
 * @export
 * @interface BlueSkyAnalyticsApi
 */
export interface BlueSkyAnalyticsApiInterface {
	/**
	 * Get growth rate statistics for account. Timeframe, from or to must be provided.
	 * @summary Growth rate statistics for account
	 * @param {BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof BlueSkyAnalyticsApiInterface
	 */
	getGlobalStatsForAccountAPI(
		requestParameters: BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest,
		options?: RawAxiosRequestConfig,
	): AxiosPromise<Array<DataPoint>>;
}

/**
 * Request parameters for getGlobalStatsForAccountAPI operation in BlueSkyAnalyticsApi.
 * @export
 * @interface BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest
 */
export interface BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest {
	/**
	 * The network to get stats for. Only BlueSky is supported right now.
	 * @type {Network}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly network: Network;

	/**
	 * The account id to get stats for. This is the did of the account for BlueSky.
	 * @type {string}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly accountId: string;

	/**
	 * The metric to get stats for
	 * @type {Metric}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly metric: Metric;

	/**
	 * The timeframe to get stats for. If to and from are not provided, will return now - Timeframe.
	 * @type {Timeframe}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly timeframe?: Timeframe;

	/**
	 * The start date of the timeframe. If not provided, timeframe and to must be provided.
	 * @type {string}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly from?: string;

	/**
	 * The end date of the timeframe. If not provided, timeframe and from must be provided.
	 * @type {string}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly to?: string;

	/**
	 * bucket size. Interval in seconds between data points. Data points will be aggregated into this bucket size. Must be provided as string
	 * @type {string}
	 * @memberof BlueSkyAnalyticsApiGetGlobalStatsForAccountAPI
	 */
	readonly bucket?: string;
}

/**
 * BlueSkyAnalyticsApi - object-oriented interface
 * @export
 * @class BlueSkyAnalyticsApi
 * @extends {BaseAPI}
 */
export class BlueSkyAnalyticsApi
	extends BaseAPI
	implements BlueSkyAnalyticsApiInterface
{
	/**
	 * Get growth rate statistics for account. Timeframe, from or to must be provided.
	 * @summary Growth rate statistics for account
	 * @param {BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof BlueSkyAnalyticsApi
	 */
	public getGlobalStatsForAccountAPI(
		requestParameters: BlueSkyAnalyticsApiGetGlobalStatsForAccountAPIRequest,
		options?: RawAxiosRequestConfig,
	) {
		return BlueSkyAnalyticsApiFp(this.configuration)
			.getGlobalStatsForAccountAPI(
				requestParameters.network,
				requestParameters.accountId,
				requestParameters.metric,
				requestParameters.timeframe,
				requestParameters.from,
				requestParameters.to,
				requestParameters.bucket,
				options,
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
